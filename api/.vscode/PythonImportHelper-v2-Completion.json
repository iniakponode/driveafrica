[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputResponse",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "ai_model_inputs_crud",
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "isExtraImport": true,
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseResponse",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "cause_crud",
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "isExtraImport": true,
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileResponse",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipResponse",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "driving_tip_crud",
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingResponse",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "embedding_crud",
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "isExtraImport": true,
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "starlette.responses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationResponse",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "location_crud",
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "isExtraImport": true,
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportResponse",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "nlg_report_crud",
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataResponse",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "raw_sensor_data_crud",
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "trip_crud",
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "isExtraImport": true,
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripResponse",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourResponse",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "unsafe_behaviour_crud",
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy.dialects.mysql",
        "description": "sqlalchemy.dialects.mysql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.mysql",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy.dialects.mysql",
        "description": "sqlalchemy.dialects.mysql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.mysql",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "safe_drive_africa_api_router",
        "importPath": "safedrive",
        "description": "safedrive",
        "isExtraImport": true,
        "detail": "safedrive",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "description": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "description": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.312dc76426e0_added_s_to_unsafe_behaviours_in_trip",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "description": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "description": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.360b0d5fe847_added_driver_profile_mapper_in_unsafe_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "description": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('nlg_report', sa.Column('driver_profile_id', sa.BINARY(length=16), nullable=False))\n    op.add_column('nlg_report', sa.Column('generated_at', sa.DateTime(), nullable=False))\n    op.alter_column('nlg_report', 'id',\n               existing_type=mysql.INTEGER(display_width=11),\n               type_=sa.BINARY(length=16),\n               existing_nullable=False)\n    op.alter_column('nlg_report', 'report_text',\n               existing_type=mysql.VARCHAR(length=2000),",
        "detail": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "description": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('nlg_report', sa.Column('user_id', mysql.VARCHAR(length=255), nullable=False))\n    op.add_column('nlg_report', sa.Column('date_range', mysql.VARCHAR(length=255), nullable=False))\n    op.drop_constraint(None, 'nlg_report', type_='foreignkey')\n    op.alter_column('nlg_report', 'synced',\n               existing_type=mysql.TINYINT(display_width=1),\n               nullable=True)\n    op.alter_column('nlg_report', 'report_text',\n               existing_type=sa.String(length=500),",
        "detail": "alembic.versions.38a895d8d600_refactored_nlg_report_codebase",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "description": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('raw_sensor_data', 'values',\n               existing_type=mysql.VARCHAR(length=1024),\n               type_=sa.JSON(),\n               existing_nullable=False)\n    op.alter_column('raw_sensor_data', 'sync',\n               existing_type=mysql.TINYINT(display_width=1),\n               nullable=False)\n    op.create_unique_constraint(None, 'raw_sensor_data', ['id'])",
        "detail": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "description": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'raw_sensor_data', type_='unique')\n    op.alter_column('raw_sensor_data', 'sync',\n               existing_type=mysql.TINYINT(display_width=1),\n               nullable=True)\n    op.alter_column('raw_sensor_data', 'values',\n               existing_type=sa.JSON(),\n               type_=mysql.VARCHAR(length=1024),\n               existing_nullable=False)",
        "detail": "alembic.versions.4b58a4ecc8fa_edited_raw_sensor_data_to_make_the_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.537b5697b6a3_initial_migration",
        "description": "alembic.versions.537b5697b6a3_initial_migration",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('driver_profile',\n    sa.Column('driver_profile_id', sa.BINARY(length=16), nullable=False),\n    sa.Column('email', sa.String(length=50), nullable=False),\n    sa.Column('sync', sa.Boolean(), nullable=False),\n    sa.PrimaryKeyConstraint('driver_profile_id'),\n    sa.UniqueConstraint('driver_profile_id'),\n    sa.UniqueConstraint('email')\n    )",
        "detail": "alembic.versions.537b5697b6a3_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.537b5697b6a3_initial_migration",
        "description": "alembic.versions.537b5697b6a3_initial_migration",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('causes')\n    op.drop_table('unsafe_behaviour')\n    op.drop_table('raw_sensor_data')\n    op.drop_table('ai_model_inputs')\n    op.drop_table('trip')\n    op.drop_table('driving_tips')\n    op.drop_table('nlg_report')\n    op.drop_table('location')",
        "detail": "alembic.versions.537b5697b6a3_initial_migration",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.84146a01839e_refactored_embedding_code",
        "description": "alembic.versions.84146a01839e_refactored_embedding_code",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('embedding',\n    sa.Column('chunk_id', sa.BINARY(length=16), nullable=False),\n    sa.Column('chunk_text', sa.String(length=255), nullable=False),\n    sa.Column('embedding', sa.String(length=1024), nullable=False),\n    sa.Column('source_type', sa.String(length=50), nullable=False),\n    sa.Column('source_page', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.PrimaryKeyConstraint('chunk_id')",
        "detail": "alembic.versions.84146a01839e_refactored_embedding_code",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.84146a01839e_refactored_embedding_code",
        "description": "alembic.versions.84146a01839e_refactored_embedding_code",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('embeddings',\n    sa.Column('chunk_id', sa.BINARY(length=16), nullable=False, comment='Unique identifier for each chunk of text.'),\n    sa.Column('chunk_text', mysql.VARCHAR(length=5000), nullable=False, comment='The text content of the chunk.'),\n    sa.Column('embedding', sa.BLOB(), nullable=False, comment='Serialized embedding vector for the chunk.'),\n    sa.Column('source_type', mysql.VARCHAR(length=255), nullable=False, comment='The type of source (e.g., nat_dr_reg_law, ng_high_way_code).'),\n    sa.Column('source_page', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True, comment='The page number for traceability.'),\n    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text('current_timestamp() ON UPDATE current_timestamp()'), nullable=False, comment='The timestamp indicating when the embedding was created.'),\n    sa.PrimaryKeyConstraint('chunk_id'),",
        "detail": "alembic.versions.84146a01839e_refactored_embedding_code",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "description": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('unsafe_behaviour', sa.Column('driver_profile_id', sa.BINARY(length=16), nullable=False))\n    op.create_foreign_key(None, 'unsafe_behaviour', 'driver_profile', ['driver_profile_id'], ['driver_profile_id'])\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'unsafe_behaviour', type_='foreignkey')\n    op.drop_column('unsafe_behaviour', 'driver_profile_id')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "description": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'unsafe_behaviour', type_='foreignkey')\n    op.drop_column('unsafe_behaviour', 'driver_profile_id')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.a281668694a0_added_driver_profile_id_to_unsafe_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "description": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('ai_model_inputs', sa.Column('synced', sa.Boolean(), nullable=False))\n    op.add_column('embedding', sa.Column('synced', sa.Boolean(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('embedding', 'synced')\n    op.drop_column('ai_model_inputs', 'synced')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "description": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('embedding', 'synced')\n    op.drop_column('ai_model_inputs', 'synced')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ad0f1d66a756_added_synced_column_to_ai_module_input",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "description": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('causes', sa.Column('synced', sa.Boolean(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('causes', 'synced')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "description": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('causes', 'synced')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ef70aac5ee1c_added_synced_column_to_unsafe_behaviours",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\"\"\"",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n        with context.begin_transaction():",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "config = context.config\n# Set the database URL here\n# config.set_main_option('sqlalchemy.url', os.getenv('DATABASE_URL', 'mysql+pymysql://dev2:ProgressIniks2018@localhost:3306/drive_safe_db'))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\ntarget_metadata = Base.metadata\ndef run_migrations_offline():",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online():",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "create_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Create a new AI model input.\n    - **trip_id**: The ID of the trip associated with this AI model input.\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "get_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def get_ai_model_input(\n    input_id: UUID,\n    db: Session = Depends(get_db),\n) -> AIModelInputResponse:\n    \"\"\"\n    Retrieve an AI model input by ID.\n    - **input_id**: The ID of the AI model input to retrieve.\n    \"\"\"\n    try:\n        ai_model_input = ai_model_inputs_crud.get(db=db, id=input_id)",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "get_all_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def get_all_ai_model_inputs(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[AIModelInputResponse]:\n    \"\"\"\n    Retrieve all AI model inputs with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "update_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def update_ai_model_input(\n    input_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputUpdate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Update an existing AI model input.\n    - **input_id**: The ID of the AI model input to update.\n    - **input_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "delete_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def delete_ai_model_input(\n    input_id: UUID,\n    db: Session = Depends(get_db),\n) -> AIModelInputResponse:\n    \"\"\"\n    Delete an AI model input by ID.\n    - **input_id**: The ID of the AI model input to delete.\n    \"\"\"\n    try:\n        ai_model_input = ai_model_inputs_crud.get(db=db, id=input_id)",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "batch_create_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def batch_create_ai_model_inputs(data: List[AIModelInputCreate], db: Session = Depends(get_db)):\n    try:\n        created_inputs = ai_model_inputs_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_inputs)} AIModelInput records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create AIModelInput: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/ai_model_inputs/batch_delete\", status_code=204)\ndef batch_delete_ai_model_inputs(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "batch_delete_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def batch_delete_ai_model_inputs(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        ai_model_inputs_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} AIModelInput records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete AIModelInput: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n# Endpoint to create a new AI model input\n@router.post(\"/ai_model_inputs/\", response_model=AIModelInputResponse)\ndef create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "router = APIRouter()\n# Endpoint to create a new AI model input\n@router.post(\"/ai_model_inputs/\", response_model=AIModelInputResponse)\ndef create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Create a new AI model input.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "create_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating cause\")\n@router.get(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef get_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "get_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def get_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    return CauseResponse.model_validate(cause)\n@router.get(\"/causes/\", response_model=List[CauseResponse])\ndef get_all_causes(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[CauseResponse]:\n    causes = cause_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(causes)} Causes.\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "get_all_causes",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def get_all_causes(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[CauseResponse]:\n    causes = cause_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(causes)} Causes.\")\n    return [CauseResponse.model_validate(cause) for cause in causes]\n@router.put(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef update_cause(cause_id: UUID, *, db: Session = Depends(get_db), cause_in: CauseUpdate) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "update_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def update_cause(cause_id: UUID, *, db: Session = Depends(get_db), cause_in: CauseUpdate) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    updated_cause = cause_crud.update(db=db, db_obj=cause, obj_in=cause_in)\n    logger.info(f\"Updated Cause with ID: {cause_id}\")\n    return CauseResponse.model_validate(updated_cause)\n@router.delete(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef delete_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "delete_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def delete_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    deleted_cause = cause_crud.delete(db=db, id=cause_id)\n    logger.info(f\"Deleted Cause with ID: {cause_id}\")\n    return CauseResponse.model_validate(deleted_cause)",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/causes/\", response_model=CauseResponse)\ndef create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/causes/\", response_model=CauseResponse)\ndef create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating cause\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "create_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def create_driver_profile(*, db: Session = Depends(get_db), profile_in: DriverProfileCreate) -> DriverProfileResponse:\n     \"\"\"\n    Creates a new driver profile.\n    - **profile_in**: Data for creating the driver profile.\n    \"\"\"\n     try:\n            new_profile = driver_profile_crud.create(db=db, obj_in=profile_in)\n            logger.info(f\"DriverProfile created with ID: {new_profile.id_uuid}\")\n            return DriverProfileResponse(driver_profile_id=new_profile.id_uuid, **profile_in.model_dump())\n     except IntegrityError as e:",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    logger.info(f\"Retrieved DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driver_profile_id=profile.id_uuid, email=profile.email, sync=profile.sync)\n@router.get(\"/driver_profiles/\", response_model=List[DriverProfileResponse])\ndef get_all_driver_profiles(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[DriverProfileResponse]:\n    profiles = driver_profile_crud.get_all(db=db, skip=skip, limit=limit)",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_all_driver_profiles",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_all_driver_profiles(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[DriverProfileResponse]:\n    profiles = driver_profile_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(profiles)} DriverProfiles.\")\n    return [DriverProfileResponse(driver_profile_id=profile.id_uuid, email=profile.email, sync=profile.sync) for profile in profiles]\n@router.put(\"/driver_profiles/{profile_id}\", response_model=DriverProfileResponse)\ndef update_driver_profile(profile_id: UUID, *, db: Session = Depends(get_db), profile_in: DriverProfileUpdate) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "update_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def update_driver_profile(profile_id: UUID, *, db: Session = Depends(get_db), profile_in: DriverProfileUpdate) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    updated_profile = driver_profile_crud.update(db=db, db_obj=profile, obj_in=profile_in)\n    logger.info(f\"Updated DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driver_profile_id=updated_profile.id_uuid, email=updated_profile.email, sync=updated_profile.sync)\n@router.delete(\"/driver_profiles/{profile_id}\", response_model=DriverProfileResponse)\ndef delete_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "delete_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def delete_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    deleted_profile = driver_profile_crud.delete(db=db, id=profile_id)\n    logger.info(f\"Deleted DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driver_profile_id=deleted_profile.id_uuid, email=deleted_profile.email, sync=deleted_profile.sync)",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(*, db: Session = Depends(get_db), profile_in: DriverProfileCreate) -> DriverProfileResponse:\n     \"\"\"\n    Creates a new driver profile.\n    - **profile_in**: Data for creating the driver profile.\n    \"\"\"\n     try:\n            new_profile = driver_profile_crud.create(db=db, obj_in=profile_in)",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(*, db: Session = Depends(get_db), profile_in: DriverProfileCreate) -> DriverProfileResponse:\n     \"\"\"\n    Creates a new driver profile.\n    - **profile_in**: Data for creating the driver profile.\n    \"\"\"\n     try:\n            new_profile = driver_profile_crud.create(db=db, obj_in=profile_in)\n            logger.info(f\"DriverProfile created with ID: {new_profile.id_uuid}\")",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "create_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(tip_id=new_tip.tip_id, **tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        logger.error(f\"Unexpected error while creating DrivingTip: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "get_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def get_driving_tip(tip_id: UUID, db: Session = Depends(get_db)) -> DrivingTipResponse:\n    try:\n        tip = driving_tip_crud.get(db=db, id=tip_id)\n        if not tip:\n            logger.warning(f\"DrivingTip with ID {tip_id} not found.\")\n            raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n         # Convert SQLAlchemy objects to Pydantic response models\n        return  DrivingTipResponse(\n                tip_id=tip.tip_id,\n                title=tip.title,",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "get_all_driving_tips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def get_all_driving_tips(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[DrivingTipResponse]:\n    try:\n        tips = driving_tip_crud.get_all(db=db, skip=skip, limit=limit)\n        logger.info(f\"Retrieved {len(tips)} DrivingTips.\")\n        # Convert SQLAlchemy objects to Pydantic response models\n        return [\n            DrivingTipResponse(\n                tip_id=tip.tip_id,\n                title=tip.title,\n                meaning=tip.meaning,",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "update_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def update_driving_tip(tip_id: UUID, *, db: Session = Depends(get_db), tip_in: DrivingTipUpdate) -> DrivingTipResponse:\n    tip = driving_tip_crud.get(db=db, id=tip_id)\n    if not tip:\n        logger.warning(f\"DrivingTip with ID {tip_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n    try:\n        updated_tip = driving_tip_crud.update(db=db, db_obj=tip, obj_in=tip_in)\n        logger.info(f\"Updated DrivingTip with ID: {tip_id}\")\n        return DrivingTipResponse(tip_id=updated_tip.tip_id, **tip_in.dict())\n    except ValueError as e:",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "delete_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def delete_driving_tip(tip_id: UUID, db: Session = Depends(get_db)) -> DrivingTipResponse:\n    tip = driving_tip_crud.get(db=db, id=tip_id)\n    if not tip:\n        logger.warning(f\"DrivingTip with ID {tip_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n    try:\n        deleted_tip = driving_tip_crud.delete(db=db, id=tip_id)\n        logger.info(f\"Deleted DrivingTip with ID: {tip_id}\")\n        return DrivingTipResponse(tip_id=deleted_tip.tip_id, \n                                  title=deleted_tip.title, ",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/driving_tips/\", response_model=DrivingTipResponse)\ndef create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(tip_id=new_tip.tip_id, **tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/driving_tips/\", response_model=DrivingTipResponse)\ndef create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(tip_id=new_tip.tip_id, **tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "create_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating embedding\")\n@router.get(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef get_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "get_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def get_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    logger.info(f\"Retrieved Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=embedding.id_uuid, chunk_text=embedding.chunk_text, embedding=embedding.embedding, source_type=embedding.source_type, source_page=embedding.source_page, created_at=embedding.created_at)\n@router.get(\"/embeddings/\", response_model=List[EmbeddingResponse])\ndef get_all_embeddings(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[EmbeddingResponse]:\n    embeddings = embedding_crud.get_all(db=db, skip=skip, limit=limit)",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "get_all_embeddings",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def get_all_embeddings(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[EmbeddingResponse]:\n    embeddings = embedding_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(embeddings)} Embeddings.\")\n    return [EmbeddingResponse(chunk_id=embed.id_uuid, chunk_text=embed.chunk_text, embedding=embed.embedding, source_type=embed.source_type, source_page=embed.source_page, created_at=embed.created_at) for embed in embeddings]\n@router.put(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef update_embedding(embedding_id: UUID, *, db: Session = Depends(get_db), embedding_in: EmbeddingUpdate) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "update_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def update_embedding(embedding_id: UUID, *, db: Session = Depends(get_db), embedding_in: EmbeddingUpdate) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    updated_embedding = embedding_crud.update(db=db, db_obj=embedding, obj_in=embedding_in)\n    logger.info(f\"Updated Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=updated_embedding.id_uuid, chunk_text=updated_embedding.chunk_text, embedding=updated_embedding.embedding, source_type=updated_embedding.source_type, source_page=updated_embedding.source_page, created_at=updated_embedding.created_at)\n@router.delete(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef delete_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "delete_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def delete_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    deleted_embedding = embedding_crud.delete(db=db, id=embedding_id)\n    logger.info(f\"Deleted Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=deleted_embedding.id_uuid, chunk_text=deleted_embedding.chunk_text, embedding=deleted_embedding.embedding, source_type=deleted_embedding.source_type, source_page=deleted_embedding.source_page, created_at=deleted_embedding.created_at)",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/embeddings/\", response_model=EmbeddingResponse)\ndef create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/embeddings/\", response_model=EmbeddingResponse)\ndef create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating embedding\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.index",
        "description": "safedrive.api.v1.endpoints.index",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\")\nasync def index():\n    \"\"\"\n    Provides an overview of all available endpoints in the Safe Drive Africa API.\n    \"\"\"\n    return {\n        \"message\": \"Welcome to the Safe Drive Africa API\",\n        \"endpoints\": {\n            \"/api/ai_model_inputs/\": {",
        "detail": "safedrive.api.v1.endpoints.index",
        "documentation": {}
    },
    {
        "label": "create_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"\n    Create a new location.\n    - **latitude**: Latitude of the location.\n    - **longitude**: Longitude of the location.\n    - **timestamp**: Timestamp when the location was recorded.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "get_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def get_location(\n    location_id: UUID,\n    db: Session = Depends(get_db),\n) -> LocationResponse:\n    \"\"\"\n    Retrieve a location by ID.\n    - **location_id**: The UUID of the location to retrieve.\n    \"\"\"\n    try:\n        location = location_crud.get(db=db, id=location_id)",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "get_all_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def get_all_locations(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[LocationResponse]:\n    \"\"\"\n    Retrieve all locations with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "update_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def update_location(\n    location_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationUpdate,\n) -> LocationResponse:\n    \"\"\"\n    Update an existing location.\n    - **location_id**: The UUID of the location to update.\n    - **location_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "delete_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def delete_location(\n    location_id: UUID,\n    db: Session = Depends(get_db),\n) -> LocationResponse:\n    \"\"\"\n    Delete a location by ID.\n    - **location_id**: The UUID of the location to delete.\n    \"\"\"\n    try:\n        location = location_crud.get(db=db, id=location_id)",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "batch_create_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def batch_create_locations(data: List[LocationCreate], db: Session = Depends(get_db)):\n    try:\n        created_locations = location_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_locations)} Location records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create Location: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/locations/batch_delete\", status_code=204)\ndef batch_delete_locations(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "batch_delete_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def batch_delete_locations(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        location_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} Location records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete Location: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/locations/\", response_model=LocationResponse)\ndef create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/locations/\", response_model=LocationResponse)\ndef create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"\n    Create a new location.\n    - **latitude**: Latitude of the location.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "create_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating NLG report\")\n@router.get(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef get_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "get_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def get_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    return NLGReportResponse(id=report.id_uuid, driver_profile_id=report.driver_profile_id, report_text=report.report_text, generated_at=report.generated_at, synced=report.synced)\n@router.get(\"/nlg_reports/\", response_model=List[NLGReportResponse])\ndef get_all_nlg_reports(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[NLGReportResponse]:\n    reports = nlg_report_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(reports)} NLGReports.\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "get_all_nlg_reports",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def get_all_nlg_reports(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[NLGReportResponse]:\n    reports = nlg_report_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(reports)} NLGReports.\")\n    return [NLGReportResponse(id=report.id_uuid, driver_profile_id=report.driver_profile_id, report_text=report.report_text, generated_at=report.generated_at, synced=report.synced) for report in reports]\n@router.put(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef update_nlg_report(report_id: UUID, *, db: Session = Depends(get_db), report_in: NLGReportUpdate) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "update_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def update_nlg_report(report_id: UUID, *, db: Session = Depends(get_db), report_in: NLGReportUpdate) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    updated_report = nlg_report_crud.update(db=db, db_obj=report, obj_in=report_in)\n    logger.info(f\"Updated NLGReport with ID: {report_id}\")\n    return NLGReportResponse(id=updated_report.id_uuid, driver_profile_id=updated_report.driver_profile_id, report_text=updated_report.report_text, generated_at=updated_report.generated_at, synced=updated_report.synced)\n@router.delete(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef delete_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "delete_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def delete_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    deleted_report = nlg_report_crud.delete(db=db, id=report_id)\n    logger.info(f\"Deleted NLGReport with ID: {report_id}\")\n    return NLGReportResponse(id=deleted_report.id_uuid, driver_profile_id=deleted_report.driver_profile_id, report_text=deleted_report.report_text, generated_at=deleted_report.generated_at, synced=deleted_report.synced)",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/nlg_reports/\", response_model=NLGReportResponse)\ndef create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/nlg_reports/\", response_model=NLGReportResponse)\ndef create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating NLG report\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "create_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Create a new raw sensor data entry.\n    - **sensor_type_name**: Name of the sensor type.\n    - **timestamp**: Timestamp of the sensor reading.\n    - **other fields**: Additional required fields.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "get_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def get_raw_sensor_data(\n    data_id: UUID,\n    db: Session = Depends(get_db),\n) -> RawSensorDataResponse:\n    \"\"\"\n    Retrieve a raw sensor data entry by ID.\n    - **data_id**: The UUID of the raw sensor data to retrieve.\n    \"\"\"\n    try:\n        raw_data = raw_sensor_data_crud.get(db=db, id=data_id)",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "get_all_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def get_all_raw_sensor_data(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[RawSensorDataResponse]:\n    \"\"\"\n    Retrieve all raw sensor data entries with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "update_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def update_raw_sensor_data(\n    data_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataUpdate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Update an existing raw sensor data entry.\n    - **data_id**: The UUID of the raw sensor data to update.\n    - **raw_data_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "delete_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def delete_raw_sensor_data(\n    data_id: UUID,\n    db: Session = Depends(get_db),\n) -> RawSensorDataResponse:\n    \"\"\"\n    Delete a raw sensor data entry by ID.\n    - **data_id**: The UUID of the raw sensor data to delete.\n    \"\"\"\n    try:\n        raw_data = raw_sensor_data_crud.get(db=db, id=data_id)",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "batch_create_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def batch_create_raw_sensor_data(data: List[RawSensorDataCreate], db: Session = Depends(get_db)):\n    try:\n        created_data = raw_sensor_data_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_data)} RawSensorData records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create RawSensorData: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/raw_sensor_data/batch_delete\", status_code=204)\ndef batch_delete_raw_sensor_data(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "batch_delete_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def batch_delete_raw_sensor_data(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        raw_sensor_data_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} RawSensorData records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete RawSensorData: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/raw_sensor_data/\", response_model=RawSensorDataResponse)\ndef create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/raw_sensor_data/\", response_model=RawSensorDataResponse)\ndef create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Create a new raw sensor data entry.\n    - **sensor_type_name**: Name of the sensor type.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "create_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driver_profile_id or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")\n        # Validate if the driver profile exists\n        profile_exists = driver_profile_crud.get(db=db, id=trip_in.driver_profile_id)\n        if not profile_exists:\n            logger.warning(f\"DriverProfile with ID {trip_in.driver_profile_id} not found.\")",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "get_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def get_trip(\n    trip_id: UUID,\n    db: Session = Depends(get_db),\n) -> TripResponse:\n    \"\"\"\n    Retrieve a trip by ID.\n    - **trip_id**: The UUID of the trip to retrieve.\n    \"\"\"\n    try:\n        trip = trip_crud.get(db=db, id=trip_id)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "get_all_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def get_all_trips(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[TripResponse]:\n    \"\"\"\n    Retrieve all trips with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "update_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def update_trip(\n    trip_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    trip_in: TripUpdate,\n) -> TripResponse:\n    \"\"\"\n    Update an existing trip.\n    - **trip_id**: The UUID of the trip to update.\n    - **trip_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "delete_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def delete_trip(\n    trip_id: UUID,\n    db: Session = Depends(get_db),\n) -> TripResponse:\n    \"\"\"\n    Delete a trip by ID.\n    - **trip_id**: The UUID of the trip to delete.\n    \"\"\"\n    try:\n        trip = trip_crud.get(db=db, id=trip_id)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "batch_create_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def batch_create_trips(data: List[TripCreate], db: Session = Depends(get_db)):\n    try:\n        created_trips = trip_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_trips)} Trip records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create Trip: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/trips/batch_delete\", status_code=204)\ndef batch_delete_trips(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "batch_delete_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def batch_delete_trips(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        trip_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} Trip records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete Trip: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/trips/\", response_model=TripResponse)\ndef create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driver_profile_id or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/trips/\", response_model=TripResponse)\ndef create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driver_profile_id or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")\n        # Validate if the driver profile exists\n        profile_exists = driver_profile_crud.get(db=db, id=trip_in.driver_profile_id)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "create_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Create a new unsafe behaviour.\n    - **trip_id**: UUID of the associated trip.\n    - **behaviour_type**: Type of unsafe behaviour.\n    - **severity**: Severity level of the unsafe behaviour.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "get_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def get_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    db: Session = Depends(get_db),\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Retrieve an unsafe behaviour by ID.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to retrieve.\n    \"\"\"\n    try:\n        unsafe_behaviour = unsafe_behaviour_crud.get(db=db, id=unsafe_behaviour_id)",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "get_all_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def get_all_unsafe_behaviours(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[UnsafeBehaviourResponse]:\n    \"\"\"\n    Retrieve all unsafe behaviours with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "update_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def update_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourUpdate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Update an existing unsafe behaviour.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to update.\n    - **unsafe_behaviour_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "delete_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def delete_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    db: Session = Depends(get_db),\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Delete an unsafe behaviour by ID.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to delete.\n    \"\"\"\n    try:\n        unsafe_behaviour = unsafe_behaviour_crud.get(db=db, id=unsafe_behaviour_id)",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "batch_create_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def batch_create_unsafe_behaviours(data: List[UnsafeBehaviourCreate], db: Session = Depends(get_db)):\n    try:\n        created_behaviours = unsafe_behaviour_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_behaviours)} UnsafeBehaviour records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create UnsafeBehaviour: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/unsafe_behaviours/batch_delete\", status_code=204)\ndef batch_delete_unsafe_behaviours(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "batch_delete_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def batch_delete_unsafe_behaviours(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        unsafe_behaviour_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} UnsafeBehaviour records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete UnsafeBehaviour: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/unsafe_behaviours/\", response_model=UnsafeBehaviourResponse)\ndef create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/unsafe_behaviours/\", response_model=UnsafeBehaviourResponse)\ndef create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Create a new unsafe behaviour.\n    - **trip_id**: UUID of the associated trip.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "safedrive.core.config",
        "description": "safedrive.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_url: str\n    class Config:\n        env_file = \".env\"\nsettings = Settings()\nif not settings.database_url:\n    raise ValueError(\"No DATABASE_URL found in environment variables\")\nprint(f\"Database URL: {settings.database_url}\")",
        "detail": "safedrive.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "safedrive.core.config",
        "description": "safedrive.core.config",
        "peekOfCode": "settings = Settings()\nif not settings.database_url:\n    raise ValueError(\"No DATABASE_URL found in environment variables\")\nprint(f\"Database URL: {settings.database_url}\")",
        "detail": "safedrive.core.config",
        "documentation": {}
    },
    {
        "label": "CRUDModelInputs",
        "kind": 6,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "class CRUDModelInputs:\n    \"\"\"\n    CRUD operations for AIModelInput model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDModelInputs:\n    \"\"\"\n    CRUD operations for AIModelInput model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "ai_model_inputs_crud",
        "kind": 5,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "ai_model_inputs_crud = CRUDModelInputs(AIModelInput)",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "CRUDCause",
        "kind": 6,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "class CRUDCause:\n    \"\"\"\n    CRUD operations for Cause.\n    Methods:\n    - **create**: Adds a new Cause record.\n    - **get**: Retrieves a Cause by UUID.\n    - **get_all**: Retrieves all Causes.\n    - **update**: Updates a Cause record.\n    - **delete**: Deletes a Cause record.\n    \"\"\"",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDCause:\n    \"\"\"\n    CRUD operations for Cause.\n    Methods:\n    - **create**: Adds a new Cause record.\n    - **get**: Retrieves a Cause by UUID.\n    - **get_all**: Retrieves all Causes.\n    - **update**: Updates a Cause record.\n    - **delete**: Deletes a Cause record.",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "cause_crud",
        "kind": 5,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "cause_crud = CRUDCause(Cause)",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "CRUDDriverProfile",
        "kind": 6,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "class CRUDDriverProfile:\n    \"\"\"\n    CRUD operations for DriverProfile.\n    Methods:\n    - **create**: Adds a new DriverProfile record.\n    - **get**: Retrieves a DriverProfile by UUID.\n    - **get_all**: Retrieves all DriverProfiles.\n    - **update**: Updates a DriverProfile record.\n    - **delete**: Deletes a DriverProfile record.\n    \"\"\"",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDDriverProfile:\n    \"\"\"\n    CRUD operations for DriverProfile.\n    Methods:\n    - **create**: Adds a new DriverProfile record.\n    - **get**: Retrieves a DriverProfile by UUID.\n    - **get_all**: Retrieves all DriverProfiles.\n    - **update**: Updates a DriverProfile record.\n    - **delete**: Deletes a DriverProfile record.",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "driver_profile_crud = CRUDDriverProfile(DriverProfile)",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "CRUDDrivingTip",
        "kind": 6,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "class CRUDDrivingTip:\n    \"\"\"\n    CRUD operations for DrivingTip.\n    Methods:\n    - **create**: Adds a new DrivingTip record.\n    - **get**: Retrieves a DrivingTip by UUID.\n    - **get_all**: Retrieves all DrivingTips.\n    - **update**: Updates a DrivingTip record.\n    - **delete**: Deletes a DrivingTip record.\n    \"\"\"",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDDrivingTip:\n    \"\"\"\n    CRUD operations for DrivingTip.\n    Methods:\n    - **create**: Adds a new DrivingTip record.\n    - **get**: Retrieves a DrivingTip by UUID.\n    - **get_all**: Retrieves all DrivingTips.\n    - **update**: Updates a DrivingTip record.\n    - **delete**: Deletes a DrivingTip record.",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "driving_tip_crud",
        "kind": 5,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "driving_tip_crud = CRUDDrivingTip(DrivingTip)",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "CRUDEmbedding",
        "kind": 6,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "class CRUDEmbedding:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: EmbeddingCreate) -> Embedding:\n        db_obj = self.model(**obj_in.dict(), chunk_id=generate_uuid_binary())\n        db.add(db_obj)\n        try:\n            db.commit()\n            logger.info(f\"Created Embedding with ID: {db_obj.chunk_id.hex()}\")\n        except Exception as e:",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDEmbedding:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: EmbeddingCreate) -> Embedding:\n        db_obj = self.model(**obj_in.dict(), chunk_id=generate_uuid_binary())\n        db.add(db_obj)\n        try:\n            db.commit()\n            logger.info(f\"Created Embedding with ID: {db_obj.chunk_id.hex()}\")",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "embedding_crud",
        "kind": 5,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "embedding_crud = CRUDEmbedding(Embedding)",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "CRUDLocation",
        "kind": 6,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "class CRUDLocation:\n    \"\"\"\n    CRUD operations for the Location model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDLocation:\n    \"\"\"\n    CRUD operations for the Location model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "location_crud",
        "kind": 5,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "location_crud = CRUDLocation(Location)",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "CRUDNLGReport",
        "kind": 6,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "class CRUDNLGReport:\n    \"\"\"\n    CRUD operations for NLGReport.\n    \"\"\"\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: NLGReportCreate) -> NLGReport:\n        db_obj = self.model(**obj_in.model_dump(), id=generate_uuid_binary())\n        if hasattr(db_obj,'driver_profile_id') and isinstance(getattr(db_obj,'driver_profile_id'), UUID):\n            setattr(db_obj, 'driver_profile_id', getattr(db_obj,'driver_profile_id').bytes)",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDNLGReport:\n    \"\"\"\n    CRUD operations for NLGReport.\n    \"\"\"\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: NLGReportCreate) -> NLGReport:\n        db_obj = self.model(**obj_in.model_dump(), id=generate_uuid_binary())\n        if hasattr(db_obj,'driver_profile_id') and isinstance(getattr(db_obj,'driver_profile_id'), UUID):",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "nlg_report_crud",
        "kind": 5,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "nlg_report_crud = CRUDNLGReport(NLGReport)",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "CRUDRawSensorData",
        "kind": 6,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "class CRUDRawSensorData:\n    \"\"\"\n    CRUD operations for the RawSensorData model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDRawSensorData:\n    \"\"\"\n    CRUD operations for the RawSensorData model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "raw_sensor_data_crud",
        "kind": 5,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "raw_sensor_data_crud = CRUDRawSensorData(RawSensorData)",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "CRUDTrip",
        "kind": 6,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "class CRUDTrip:\n    \"\"\"\n    CRUD operations for the Trip model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDTrip:\n    \"\"\"\n    CRUD operations for the Trip model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "trip_crud",
        "kind": 5,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "trip_crud = CRUDTrip(Trip)",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "CRUDUnsafeBehaviour",
        "kind": 6,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "class CRUDUnsafeBehaviour:\n    \"\"\"\n    CRUD operations for the UnsafeBehaviour model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDUnsafeBehaviour:\n    \"\"\"\n    CRUD operations for the UnsafeBehaviour model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "unsafe_behaviour_crud",
        "kind": 5,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "unsafe_behaviour_crud = CRUDUnsafeBehaviour(UnsafeBehaviour)",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\n# Create a new SQLAlchemy engine instance\nengine = create_engine(DATABASE_URL)\n# Create a configured \"Session\" class\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Base class for our classes definitions\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\n# Create a configured \"Session\" class\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Base class for our classes definitions\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Base class for our classes definitions\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "peekOfCode": "def get_db():\n    \"\"\"\n    Dependency to get a SQLAlchemy session.\n    This will ensure that the session is properly closed after use.\n    Yields:\n        db (SessionLocal): SQLAlchemy session object.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "kind": 6,
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "peekOfCode": "class AIModelInput(Base):\n    \"\"\"\n    SQLAlchemy model for AI Model Input.\n    Attributes:\n    - **id**: Primary key, stored as BINARY(16).\n    - **trip_id**: Foreign key referencing Trip.id, stored as BINARY(16).\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.\n    - **hour_of_day_mean**: Mean hour of the day.\n    - **day_of_week_mean**: Mean day of the week.",
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass AIModelInput(Base):\n    \"\"\"\n    SQLAlchemy model for AI Model Input.\n    Attributes:\n    - **id**: Primary key, stored as BINARY(16).\n    - **trip_id**: Foreign key referencing Trip.id, stored as BINARY(16).\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.",
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "Cause",
        "kind": 6,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "class Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.\n    - **name**: Description or name of the cause.\n    - **influence**: Boolean indicating if the cause has significant influence.\n    - **created_at**: Timestamp when the cause was recorded.\n    - **updated_at**: Timestamp when the cause was last updated.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.\n    - **name**: Description or name of the cause.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "kind": 6,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "class DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driver_profile_id = Column(BINARY(16), primary_key=True, unique=True, default=generate_uuid_binary)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships\n    driving_tips = relationship(\"DrivingTip\", back_populates=\"profile\", cascade=\"all, delete-orphan\")\n    trips = relationship(\"Trip\", back_populates=\"driver_profile\", cascade=\"all, delete-orphan\")\n    unsafe_behaviours= relationship(\"UnsafeBehaviour\", back_populates=\"driver_profile\", cascade=\"all, delete-orphan\")\n    nlg_reports=relationship(\"NLGReport\", back_populates=\"driver_profile\", cascade=\"all, delete-orphan\")",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driver_profile_id = Column(BINARY(16), primary_key=True, unique=True, default=generate_uuid_binary)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships\n    driving_tips = relationship(\"DrivingTip\", back_populates=\"profile\", cascade=\"all, delete-orphan\")",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driver_profile_id = Column(BINARY(16), primary_key=True, unique=True, default=generate_uuid_binary)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "kind": 6,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "class DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.\n    - **meaning**: Explanation of the driving tip's meaning.\n    - **penalty**: Any penalties associated with not following the tip.\n    - **fine**: The amount of fine, if applicable.\n    - **law**: Relevant law associated with the tip.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.\n    - **meaning**: Explanation of the driving tip's meaning.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "kind": 6,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "class Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.\n    - **source_type**: Source type of the chunked text (e.g., Research Article).\n    - **source_page**: Page number from where the text originates.\n    - **created_at**: Timestamp of creation.",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.\n    - **source_type**: Source type of the chunked text (e.g., Research Article).",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    return uuid4().bytes\nclass Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.generate_uuid_binary",
        "description": "safedrive.models.generate_uuid_binary",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes",
        "detail": "safedrive.models.generate_uuid_binary",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "peekOfCode": "class Location(Base):\n    \"\"\"\n    Location model representing the geographical information captured during a trip.\n    Attributes:\n    - **id**: Unique identifier for each location.\n    - **latitude**: Latitude of the recorded location.\n    - **longitude**: Longitude of the recorded location.\n    - **timestamp**: The epoch timestamp when the location was recorded (milliseconds).\n    - **date**: The date the location was recorded.\n    - **altitude**: Altitude of the recorded location.",
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Location(Base):\n    \"\"\"\n    Location model representing the geographical information captured during a trip.\n    Attributes:\n    - **id**: Unique identifier for each location.\n    - **latitude**: Latitude of the recorded location.\n    - **longitude**: Longitude of the recorded location.\n    - **timestamp**: The epoch timestamp when the location was recorded (milliseconds).",
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "kind": 6,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "class NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.\n    - **generated_at**: Timestamp of report generation.\n    - **synced**: Boolean indicating if the report is synced with a remote server.\n    \"\"\"",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.\n    - **generated_at**: Timestamp of report generation.",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    return uuid4().bytes\nclass NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "kind": 6,
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "peekOfCode": "class RawSensorData(Base):\n    \"\"\"\n    Represents raw sensor data collected from sensors.\n    Attributes:\n    - **id**: Unique identifier for the raw sensor data.\n    - **sensor_type**: Type of the sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: Name of the sensor type.\n    - **values**: Sensor readings, stored as a JSON-encoded string.\n    - **timestamp**: Timestamp of the sensor reading.\n    - **date**: Date when the sensor reading was recorded.",
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass RawSensorData(Base):\n    \"\"\"\n    Represents raw sensor data collected from sensors.\n    Attributes:\n    - **id**: Unique identifier for the raw sensor data.\n    - **sensor_type**: Type of the sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: Name of the sensor type.\n    - **values**: Sensor readings, stored as a JSON-encoded string.",
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "Trip",
        "kind": 6,
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "peekOfCode": "class Trip(Base):\n    __tablename__ = \"trip\"\n    id = Column(BINARY(16), primary_key=True, default=generate_uuid_binary)\n    driver_profile_id = Column(BINARY(16), ForeignKey('driver_profile.driver_profile_id'), nullable=False)\n    start_date = Column(DateTime)\n    end_date = Column(DateTime)\n    start_time = Column(Integer, nullable=False)\n    end_time = Column(Integer)\n    synced = Column(Boolean, nullable=False)\n    # Relationships",
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Trip(Base):\n    __tablename__ = \"trip\"\n    id = Column(BINARY(16), primary_key=True, default=generate_uuid_binary)\n    driver_profile_id = Column(BINARY(16), ForeignKey('driver_profile.driver_profile_id'), nullable=False)\n    start_date = Column(DateTime)\n    end_date = Column(DateTime)\n    start_time = Column(Integer, nullable=False)\n    end_time = Column(Integer)",
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "kind": 6,
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviour(Base):\n    \"\"\"\n    Represents the unsafe_behaviour table in the database.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: Foreign key to Trip model representing the trip associated with the unsafe behaviour.\n    - **location_id**: Foreign key to Location model representing the location associated with the behaviour.\n    - **behaviour_type**: Type of the unsafe behaviour detected.\n    - **severity**: Severity level of the unsafe behaviour.\n    - **timestamp**: The Unix timestamp representing the time when the behaviour was detected.",
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass UnsafeBehaviour(Base):\n    \"\"\"\n    Represents the unsafe_behaviour table in the database.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: Foreign key to Trip model representing the trip associated with the unsafe behaviour.\n    - **location_id**: Foreign key to Location model representing the location associated with the behaviour.\n    - **behaviour_type**: Type of the unsafe behaviour detected.",
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "AIModelInputBase",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputBase(BaseModel):\n    \"\"\"\n    Base schema for AI Model Input entity.\n    Attributes:\n    - **trip_id**: UUID of the associated trip.\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.\n    - **hour_of_day_mean**: Mean hour of the day.\n    - **day_of_week_mean**: Mean day of the week.\n    - **speed_std**: Standard deviation of speed.",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputCreate(AIModelInputBase):\n    \"\"\"\n    Schema for creating a new AI Model Input.\n    \"\"\"\n    pass\nclass AIModelInputUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing AI Model Input.\n    All fields are optional.\n    \"\"\"",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing AI Model Input.\n    All fields are optional.\n    \"\"\"\n    timestamp: Optional[datetime] = Field(None, description=\"Timestamp of the AI model input.\")\n    date: Optional[datetime] = Field(None, description=\"Date of the AI model input.\")\n    hour_of_day_mean: Optional[float] = Field(None, description=\"Mean hour of the day.\")\n    day_of_week_mean: Optional[float] = Field(None, description=\"Mean day of the week.\")\n    speed_std: Optional[float] = Field(None, description=\"Standard deviation of speed.\")",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputResponse(AIModelInputBase):\n    \"\"\"\n    Schema for representing an AI Model Input response.\n    Inherits from AIModelInputBase and adds the `id` field.\n    \"\"\"\n    id: UUID = Field(..., description=\"UUID of the AI model input.\")\n    class Config:\n        from_attributes = True",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "CauseBase",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseBase(BaseModel):\n    \"\"\"\n    Base schema for Cause containing common attributes.\n    Attributes:\n    - **id**: Unique identifier for the cause.\n    - **unsafe_behaviour_id**: Identifier of the associated unsafe behavior.\n    - **name**: Description of the cause.\n    - **influence**: Indicates if the cause is influential.\n    - **created_at**: Creation timestamp.\n    - **updated_at**: Last update timestamp.",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Cause.\n    Attributes:\n    - **unsafe_behaviour_id**: Identifier of the associated unsafe behavior.\n    - **name**: Description of the cause.\n    - **influence**: Indicates if the cause is influential.\n    - **created_at**: Creation timestamp.\n    \"\"\"\n    unsafe_behaviour_id: UUID",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Cause.\n    Attributes:\n    - **name**: Optionally update the cause description.\n    - **influence**: Optionally update the influence status.\n    - **updated_at**: Optionally update the timestamp for last update.\n    \"\"\"\n    name: Optional[str] = None\n    influence: Optional[bool] = None",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseResponse(CauseBase):\n    \"\"\"\n    Response schema for Cause, inheriting from CauseBase.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "DriverProfileBase",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileBase(BaseModel):\n    \"\"\"\n    Base schema for DriverProfile, including common attributes.\n    \"\"\"\n    driver_profile_id: UUID\n    email: str\n    sync: bool\n    class Config:\n        from_attributes = True\nclass DriverProfileCreate(BaseModel):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new DriverProfile.\n    Attributes:\n    - **email**: The driver's email (unique).\n    - **sync**: Indicates if data is synced (optional).\n    \"\"\"\n    email: str\n    sync: Optional[bool] = False\nclass DriverProfileUpdate(BaseModel):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileUpdate(BaseModel):\n    \"\"\"\n    Schema for updating a DriverProfile.\n    Attributes:\n    - **email**: Optionally updated email.\n    - **sync**: Optionally updated sync status.\n    \"\"\"\n    email: Optional[str] = None\n    sync: Optional[bool] = None\nclass DriverProfileResponse(DriverProfileBase):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileResponse(DriverProfileBase):\n    \"\"\"\n    Response schema for DriverProfile, with UUID conversion for JSON responses.\n    \"\"\"\n    driver_profile_id: UUID\n    email: str\n    sync: bool\n    class Config:\n        from_attributes = True",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTipBase",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipBase(BaseModel):\n    \"\"\"\n    Base schema for DrivingTip containing common attributes.\n    Attributes:\n    - **tip_id**: Unique identifier for the driving tip.\n    - **title**: Title of the driving tip.\n    - **meaning**: Explanation of the tip's meaning.\n    - **penalty**: Penalty details, if applicable.\n    - **fine**: Fine amount associated with the tip.\n    - **law**: Related law to the tip.",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new DrivingTip.\n    \"\"\"\n    title: str\n    meaning: Optional[str] = None\n    penalty: Optional[str] = None\n    fine: Optional[str] = None\n    law: Optional[str] = None\n    hostility: Optional[str] = None",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing DrivingTip.\n    \"\"\"\n    title: Optional[str] = None\n    meaning: Optional[str] = None\n    penalty: Optional[str] = None\n    fine: Optional[str] = None\n    law: Optional[str] = None\n    hostility: Optional[str] = None",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipResponse(DrivingTipBase):\n    \"\"\"\n    Response schema for DrivingTip.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "EmbeddingBase",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingBase(BaseModel):\n    chunk_id: UUID\n    chunk_text: str\n    embedding: str\n    source_type: str\n    source_page: int\n    created_at: datetime\n    synced: bool\n    class Config:\n        orm_mode = True",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingCreate(BaseModel):\n    chunk_text: str\n    embedding: str\n    source_type: str\n    source_page: int\n    synced: Optional[bool] = False\nclass EmbeddingUpdate(BaseModel):\n    chunk_text: Optional[str] = None\n    embedding: Optional[str] = None\n    source_type: Optional[str] = None",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingUpdate(BaseModel):\n    chunk_text: Optional[str] = None\n    embedding: Optional[str] = None\n    source_type: Optional[str] = None\n    source_page: Optional[int] = None\n    synced: Optional[bool] = None\nclass EmbeddingResponse(EmbeddingBase):\n    pass",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingResponse(EmbeddingBase):\n    pass",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "LocationBase",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationBase(BaseModel):\n    \"\"\"\n    Base schema for the Location model.\n    Attributes:\n    - **id**: The unique identifier for each location entry.\n    - **latitude**: The latitude coordinate of the location.\n    - **longitude**: The longitude coordinate of the location.\n    - **timestamp**: The timestamp indicating when the location data was recorded (epoch milliseconds).\n    - **date**: The date corresponding to the location data.\n    - **altitude**: The altitude of the location in meters.",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Location record.\n    \"\"\"\n    latitude: float = Field(..., description=\"The latitude coordinate of the location.\")\n    longitude: float = Field(..., description=\"The longitude coordinate of the location.\")\n    timestamp: int = Field(..., description=\"The timestamp when the location data was recorded (epoch milliseconds).\")\n    date: datetime = Field(..., description=\"The date corresponding to the location data.\")\n    altitude: float = Field(..., description=\"The altitude of the location in meters.\")\n    speed: float = Field(..., description=\"The speed at the given location.\")",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Location record.\n    All fields are optional.\n    \"\"\"\n    latitude: Optional[float] = Field(None, description=\"Optionally update the latitude of the location.\")\n    longitude: Optional[float] = Field(None, description=\"Optionally update the longitude of the location.\")\n    timestamp: Optional[int] = Field(None, description=\"Optionally update the timestamp of the location.\")\n    date: Optional[datetime] = Field(None, description=\"Optionally update the date of the location.\")\n    altitude: Optional[float] = Field(None, description=\"Optionally update the altitude.\")",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationResponse(LocationBase):\n    \"\"\"\n    Schema for the response format of a Location record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "NLGReportBase",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportBase(BaseModel):\n    \"\"\"\n    Base schema for NLG Report.\n    Attributes:\n    - **id**: Unique identifier for the report.\n    - **user_id**: Identifier for the user who generated the report.\n    - **report_text**: Full text content of the report.\n    - **generated_at**: Generation date and time of the report.\n    - **synced**: Indicates if the report has been synced.\n    \"\"\"",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new NLG Report.\n    Attributes:\n    - **user_id**: Identifier for the user who generated the report.\n    - **report_text**: Text content of the report.\n    - **generated_at**: Generation date and time of the report.\n    - **synced**: Boolean indicating if the report has been synced.\n    \"\"\"\n    driver_profile_id: UUID",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing NLG Report.\n    Attributes:\n    - **report_text**: Optional update to the report content.\n    - **synced**: Optional update to sync status.\n    \"\"\"\n    report_text: Optional[str] = None\n    synced: Optional[bool] = None\n    class Config:",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportResponse(NLGReportBase):\n    \"\"\"\n    Schema for NLG Report response format, inherits from NLGReportBase.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorDataBase",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataBase(BaseModel):\n    \"\"\"\n    Base schema for the Raw Sensor Data model.\n    Attributes:\n    - **id**: The unique identifier for the sensor data record.\n    - **sensor_type**: The type of sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: The name of the sensor type.\n    - **values**: A list of sensor readings.\n    - **timestamp**: The timestamp when the data was recorded.\n    - **date**: The date when the data was recorded.",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Raw Sensor Data record.\n    \"\"\"\n    sensor_type: int = Field(..., description=\"The type of sensor (e.g., accelerometer, gyroscope).\")\n    sensor_type_name: str = Field(..., description=\"The name of the sensor type.\")\n    values: List[float] = Field(..., description=\"A list of sensor readings.\")\n    timestamp: int = Field(..., description=\"The timestamp when the data was recorded.\")\n    date: Optional[datetime] = Field(None, description=\"The date when the data was recorded.\")\n    accuracy: int = Field(..., description=\"The accuracy level of the sensor data.\")",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Raw Sensor Data record.\n    All fields are optional.\n    \"\"\"\n    sensor_type: Optional[int] = Field(None, description=\"Optionally update the type of sensor.\")\n    sensor_type_name: Optional[str] = Field(None, description=\"Optionally update the name of the sensor type.\")\n    values: Optional[List[float]] = Field(None, description=\"Optionally update the sensor readings.\")\n    timestamp: Optional[int] = Field(None, description=\"Optionally update the timestamp when the data was recorded.\")\n    date: Optional[datetime] = Field(None, description=\"Optionally update the date when the data was recorded.\")",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataResponse(RawSensorDataBase):\n    \"\"\"\n    Schema for the response format of a Raw Sensor Data record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "TripBase",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripBase(BaseModel):\n    \"\"\"\n    Base schema for the Trip model.\n    Attributes:\n    - **id**: The unique identifier for the trip.\n    - **driver_profile_id**: The foreign key reference to the driver's profile.\n    - **start_date**: The start date of the trip.\n    - **end_date**: The end date of the trip.\n    - **start_time**: The start time of the trip in epoch milliseconds.\n    - **end_time**: The end time of the trip in epoch milliseconds.",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Trip record.\n    \"\"\"\n    driver_profile_id: UUID = Field(..., description=\"The UUID of the driver's profile.\")\n    start_date: Optional[datetime] = Field(None, description=\"The start date of the trip.\")\n    end_date: Optional[datetime] = Field(None, description=\"The end date of the trip.\")\n    start_time: int = Field(..., description=\"The start time of the trip in epoch milliseconds.\")\n    end_time: Optional[int] = Field(None, description=\"The end time of the trip in epoch milliseconds.\")\n    synced: Optional[bool] = Field(False, description=\"Indicates whether the trip data has been synced.\")",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Trip record.\n    All fields are optional.\n    \"\"\"\n    driver_profile_id: Optional[UUID] = Field(None, description=\"Optionally update the driver's profile reference.\")\n    start_date: Optional[datetime] = Field(None, description=\"Optionally update the start date of the trip.\")\n    end_date: Optional[datetime] = Field(None, description=\"Optionally update the end date of the trip.\")\n    start_time: Optional[int] = Field(None, description=\"Optionally update the start time of the trip in epoch milliseconds.\")\n    end_time: Optional[int] = Field(None, description=\"Optionally update the end time of the trip in epoch milliseconds.\")",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripResponse(TripBase):\n    \"\"\"\n    Schema for the response format of a Trip record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourBase",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourBase(BaseModel):\n    \"\"\"\n    Base schema for Unsafe Behaviour data.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: UUID of the trip associated with this unsafe behaviour.\n    - **location_id**: UUID of the location associated with this behaviour.\n    - **behaviour_type**: Type of unsafe behaviour observed (e.g., speeding, harsh braking).\n    - **severity**: Severity level of the unsafe behaviour.\n    - **timestamp**: Epoch timestamp when the behaviour was recorded.",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Unsafe Behaviour record.\n    \"\"\"\n    trip_id: UUID = Field(..., description=\"UUID of the trip associated with this unsafe behaviour.\")\n    location_id: Optional[UUID] = Field(None, description=\"UUID of the location associated with this behaviour.\")\n    driver_profile_id: UUID = Field(..., description=\"UUID of the driving profile associated with this unsafe behaviour.\")\n    behaviour_type: str = Field(..., description=\"Type of unsafe behaviour observed.\")\n    severity: float = Field(..., description=\"Severity level of the unsafe behaviour.\")\n    timestamp: int = Field(..., description=\"Epoch timestamp when the behaviour was recorded.\")",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Unsafe Behaviour record.\n    All fields are optional.\n    \"\"\"\n    location_id: Optional[UUID] = Field(None, description=\"Optionally update the location associated with this behaviour.\")\n    trip_id: UUID = Field(..., description=\"UUID of the trip associated with this unsafe behaviour.\")\n    driver_profile_id: UUID = Field(..., description=\"UUID of the driving profile associated with this unsafe behaviour.\")\n    behaviour_type: Optional[str] = Field(None, description=\"Optionally update the type of unsafe behaviour.\")\n    severity: Optional[float] = Field(None, description=\"Optionally update the severity level.\")",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourResponse(UnsafeBehaviourBase):\n    \"\"\"\n    Schema for the response format of Unsafe Behaviour data.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(api_router)\n# Run the app using uvicorn when executed directly\nif __name__ == \"__main__\":\n    logging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',\n    handlers=[\n        logging.StreamHandler()\n    ]",
        "detail": "main",
        "documentation": {}
    }
]